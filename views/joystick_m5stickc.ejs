<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<title><%= room %></title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<script src="//code.jquery.com/jquery-3.2.1.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
<link href="//use.fontawesome.com/releases/v5.8.1/css/all.css" rel="stylesheet"/>
<script src="https://unpkg.com/obniz@3.19.0/obniz.js" crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link rel="shortcut icon" href="/icon.png" type="image/png"/>
<link rel="icon" href="/icon.png" type="image/png"/>
<link rel="apple-touch-icon" href="/icon.png"/>

<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>
<meta name="apple-mobile-web-app-status-bar-style" content="black"/>
<meta name="apple-mobile-web-app-title" content="Joystick with Obniz"/>

<!-- // OGP tags -->
<meta property="og:title" content="Doodle Share"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://doodle-share.herokuapp.com/"/>
<meta property="og:image" content="https://doodle-share.herokuapp.com/icon.png"/>
<meta property="og:site_name" content="Doodle Share"/>
<meta property="og:description" content="Doodle Share : リアルタイムお絵描き共有サービス"/>
<!-- OGP tags // -->

<!-- // Twitter Card -->
<meta property="twitter:card" content="summary"/>
<meta property="twitter:site" content="@dotnsf"/>
<meta property="twitter:creator" content="@dotnsf"/>
<meta property="twitter:url" content="https://doodle-share.herokuapp.com/"/>
<meta property="twitter:image" content="https://doodle-share.herokuapp.com/icon.png"/>
<meta property="twitter:title" content="Doodle Share"/>
<meta property="twitter:description" content="Doodle Share : リアルタイムお絵描き共有サービス"/>
<!-- Twitter Card // -->

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
#mycanvas{
  border: 1px solid #333;
}
#comment{
  width: 100%;
}
</style>
</head>
<body>
<div id="obniz-debug"></div>

<h3 id="name"><%= name %></h3>

<select id="select_color" name="select_color">
  <option style="color:black;" value="transparent"><%= __('common.color.transparent') %></option>
  <option style="color:black;" value="black" selected="selected"><%= __('common.color.black') %></option>
  <option style="color:lightgray;" value="white"><%= __('common.color.white') %></option>
  <option style="color:red;" value="red"><%= __('common.color.red') %></option>
  <option style="color:blue;" value="blue"><%= __('common.color.blue') %></option>
  <option style="color:green;" value="green"><%= __('common.color.green') %></option>
  <option style="color:yellow;" value="yellow"><%= __('common.color.yellow') %></option>
  <option style="color:cyan;" value="cyan"><%= __('common.color.cyan') %></option>
  <option style="color:magenta;" value="magenta"><%= __('common.color.magenta') %></option>
  <option style="color:gray;" value="gray"><%= __('common.color.gray') %></option>
  <option style="color:#ef8f9c;" value="#ef8f9c"><%= __('common.color.pink') %></option>
  <option style="color:#ead2ad;" value="#ead2ad"><%= __('common.color.beige') %></option>
  <option style="color:#7c6035;" value="#7c6035"><%= __('common.color.brown') %></option>
</select>

<select id="select_linewidth" name="select_linewidth">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
  <option value="4">4</option>
  <option value="5" selected="selected">5</option>
  <option value="6">6</option>
  <option value="7">7</option>
  <option value="8">8</option>
  <option value="9">9</option>
  <option value="10">10</option>
</select>

<input type="button" class="btn btn-xs btn-secondary p-0" id="setbg_btn" value="<%= __('common.button.background') %>" onClick="setBG();"/>
<!--
<a href="#" class="btn btn-xs btn-secondary p-0" id="setbg_btn" onClick="setBG();"/><i class="far fa-image"></i></a>
<a href="#" class="btn btn-xs btn-secondary p-0" data-toggle="modal" data-target="#commentModal" id="comment_btn"><i class="fas fa-comment-dots"></i></a>
-->

<div id="canvas_div">
  <div id="cdiv"></div>

  <br/>
  <input type="button" class="btn btn-xs btn-primary" id="start_btn" value="START" onClick="game_start();"/>
  <!--
  <br/>
  <input type="button" class="btn btn-xs" id="undo_btn" value="<" onClick="undo();" disabled="disabled"/>
  <input type="button" class="btn btn-xs btn-warning" value="<%= __('common.button.reset') %>" onClick="resetCanvas();"/>
  <input type="button" class="btn btn-xs btn-primary" id="save_btn" value="<%= __('common.button.save') %>" onClick="save();"/>
  <input type="button" class="btn btn-xs" id="redo_btn" value=">" onClick="redo();" disabled="disabled"/>
  -->
</div>

<div class="modal bd-example-modal-lg fade" id="commentModal" tabindex="-1" role="dialog" aria-labbelledby="commentModal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="commentModalLabel"><%= __('common.comment') %></h4>
      </div>
      <div class="modal-body" id="commentmodal-body">
        <textarea id="comment"></textarea>
      </div>
      <div class="modal-footer btn-center">
        <button type="button" class="btn btn-primary modal_button" data-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

<script>
function BufferLoader(context, urlList, callback) {
  this.context = context;
  this.urlList = urlList;
  this.onload = callback;
  this.bufferList = new Array();
  this.loadCount = 0;
}

BufferLoader.prototype.loadBuffer = function(url, index) {
  // Load buffer asynchronously
  var request = new XMLHttpRequest();
  request.open("GET", url, true);
  request.responseType = "arraybuffer";

  var loader = this;

  request.onload = function() {
    // Asynchronously decode the audio file data in request.response
    loader.context.decodeAudioData(
      request.response,
      function(buffer) {
        if (!buffer) {
          alert('error decoding file data: ' + url);
          return;
        }
        loader.bufferList[index] = buffer;
        if (++loader.loadCount == loader.urlList.length)
          loader.onload(loader.bufferList);
      },
      function(error) {
        console.error('decodeAudioData error', error);
      }
    );
  }

  request.onerror = function() {
    alert('BufferLoader: XHR error');
  }

  request.send();
}

BufferLoader.prototype.load = function() {
  for (var i = 0; i < this.urlList.length; ++i)
  this.loadBuffer(this.urlList[i], i);
}


var uuid = generateUUID();
var socketio = null;

var base_url = location.origin + '/';
var backgroundcolor = null;

var borderWidth = 1;
var isPush = false;
var onGame = false;

var mx = 0;
var my = 0;
var score = 0;
var loopcount = 0;
var Zs = [];
var Znum = 1;
var ystep = 1;

var audio_context = null;
var audio_source_sample = null;
var audio_source_come = null;
var audio_source_end = null;
var audio_source_hit = null;
var audio_source_shoot = null;
var audio_source_start = null;

function game_start(){
  onGame = true;
  score = 0;
  ystep = 1;

  if( audio_context == null ){
    //. Audio
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    audio_context = new AudioContext();
    loadAudioList();
  }

  if( audio_source_start ){
    audio_source_start.connect( audio_context.destination );
    try{
      audio_source_start.start( 0 );
      loadAudioList();
    }catch( e ){
    }
  }

  //pushStart();
}

var obnizid = '<%= name %>';
var obniz = null;
if( obnizid ){
  obniz = new Obniz.M5StickC( obnizid );  //. for Obniz.M5StickC
  obniz.onerror = async ( ob, err ) => {
    console.log( err );
    /*
    M5StickC 用の JOYSTICK HAT を接続すると、

    Error: Error: Error module=2 func=1 err0=0 returned=1
    at M5StickC.error (obniz.js:3438:60)
    at M5StickC._notifyToModule (obniz.js:3516:22)
    at M5StickC.wsOnMessage (obniz.js:2794:26)
    at obniz.js:2960:18
    at CompatibleWebSocket.onmessage (obniz.js:19856:17)

    が４回繰り返された（ここまでは正常時も出るのでOK）後にこのエラー

    Error: i2c0: reading error. Communication Timeout. Maybe, target is not connected.
    at M5StickC.error (obniz.js:3438:60)
    at PeripheralI2C.<anonymous> (obniz.js:16168:28)
    at PeripheralI2C.emit (obniz.js:75265:33)
    at PeripheralI2C.notifyFromObniz (obniz.js:5231:22)
    at M5StickC._notifyToModule (obniz.js:2286:37)
    at M5StickC._notifyToModule (obniz.js:3503:15)
    at M5StickC.wsOnMessage (obniz.js:2794:26)
    at obniz.js:2960:18
    at CompatibleWebSocket.onmessage (obniz.js:19856:17)
    */
  }
  obniz.onconnect = async () => {
    //. Joystick
    //var joystick = obniz.wired( "Grove_JoyStick", { grove: obniz.grove0 } );
    var joystick = obniz.wired( "Grove_JoyStick", { scl:26, sda:0 } );
    while( true ){
      var x = await joystick.getXWait()
      var y = await joystick.getYWait()
      var z = await joystick.isPressedWait();

      if( x < 5 && mx + 10 < canvas_width ){
        mx += 10;
      }else if( x < 55 && mx + 5 < canvas_width ){
        mx += 5;
      }else if( x < 100 && mx + 1 < canvas_width ){
        mx ++;
      }else if( x > 250 && mx - 10 > 0 ){
        mx -= 10;
      }else if( x > 200 && mx - 5 > 0 ){
        mx -= 5;
      }else if( x > 155 && mx - 1 > 0 ){
        mx --;
      }
      if( y < 5 && my - 10 > 0 ){
        my -= 10;
      }else if( y < 55 && my - 5 > 0 ){
        my -= 5;
      }else if( y < 100 && my - 1 > 0 ){
        my --;
      }else if( y > 250 && my + 10 < canvas_height ){
        my += 10;
      }else if( y > 200 && my + 5 < canvas_height ){
        my += 5;
      }else if( y > 155 && my + 1 < canvas_height ){
        my ++;
      }
      //console.log( ` -> [${mx},${my} : ${isPush}]` );

      if( onGame && Zs.length ){
        for( var i = 0; i < Zs.length; i ++ ){
          //. Zs[i] = { x: 100, y: 100, num: 8 };
          Zs[i].y += ystep;
          if( Zs[i].y >= canvas_height ){
            onGame = false;
            $('#start_btn').css( 'display', 'inline' );
            ystep = 0;
            //score -= Zs[i].num * 10;
            //if( score < 0 ){ score = 0; }
            Zs.splice( i, 1 );

            if( audio_source_end ){
              audio_source_end.connect( audio_context.destination );
              try{
                audio_source_end.start( 0 );
                loadAudioList();
              }catch( e ){
              }
            }
          }
        }
      }

      redrawCanvas();

      if( onGame && !isPush && z ){
        pushStart();
      }else if( onGame && isPush && !z ){
        pushEnd();
      }
      //isPush = z;

      //. 標準の移動
      drawTarget();

      await obniz.wait( 50 );
      loopcount ++;
      if( loopcount % 20 == 0 ){  //. １秒おきにキャンバスを画像化して送信
        sendImage();
      }

      //. 敵追加
      while( onGame && Zs.length < Znum ){
        var num = Math.floor( Math.random() * 9 ) + 1;
        var x = Math.floor( Math.random() * ( canvas_width - 40 ) ) + 20;
        var y = 40;
        Zs.push( { x: x, y: y, num: num } );

        if( audio_source_come ){
          audio_source_come.connect( audio_context.destination );
          try{
            audio_source_come.start( 0 );
            loadAudioList();
          }catch( e ){
          }
        }
      }
    }
  }
}else{
  console.log( "access has to be done with obnizid=XXXX-XXXX parameter" );
}

$(function(){
  //. ヒストリバック無効化
  if( window.history && window.history.pushState ){
    history.pushState( "nohb", null, null );
    $(window).on( "popState", function( evt ){
      if( !event.originalEvent.state ){
        history.pushState( "nohb", null, null );
        return;
      }
    });
  }

<% if( !save ){ %>
  $('#save_btn').addClass( 'btn-secondary' );
  $('#save_btn').prop( 'disabled', true );
<% } %>


  socketio = io.connect();

  init();
});

function loadAudioList(){
  bufferLoader = new BufferLoader(
    audio_context,
    [ './sample.ogg', './come.ogg', './end.ogg', './hit.ogg', './shoot.ogg', './start.ogg' ],
    finishedLoading
  );
  bufferLoader.load();
}

function finishedLoading( bufferList ){
  audio_source_sample = audio_context.createBufferSource();
  audio_source_come = audio_context.createBufferSource();
  audio_source_end = audio_context.createBufferSource();
  audio_source_hit = audio_context.createBufferSource();
  audio_source_shoot = audio_context.createBufferSource();
  audio_source_start = audio_context.createBufferSource();

  audio_source_sample.buffer = bufferList[0];
  audio_source_come.buffer = bufferList[1];
  audio_source_end.buffer = bufferList[2];
  audio_source_hit.buffer = bufferList[3];
  audio_source_shoot.buffer = bufferList[4];
  audio_source_start.buffer = bufferList[5];

  /*
  audio_source_come.connect( audio_context.destination );
  audio_source_end.connect( audio_context.destination );
  audio_source_hit.connect( audio_context.destination );
  audio_source_shoot.connect( audio_context.destination );
  audio_source_start.connect( audio_context.destination );

  */
  //console.log( '.ogg sample' );
  //audio_source_sample.connect( audio_context.destination );
  //audio_source_sample.start( 0 );
  //loadAudioList();
}

var canvas_width = 0;
var canvas_height = 0;
function init(){
  $('#comment').html( '' );
  $('#cdiv').html( '<canvas width="80%" height="50%" id="mycanvas"></canvas>' );

  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  canvas.width = canvas_width = browserWidth * 0.8;
  canvas.height = canvas_height = browserHeight * 0.6;

  $('#select_color').change( function(){
    var color = $(this).val();
    if( color == 'white' ){
      color = 'lightgray';
    }else if( color == 'transparent' ){
      color = 'black';
    }
    $(this).css( { 'color': color } );
    $('#select_linewidth').css( { 'color': color } );
    $('#setbg_btn').css( { 'background': color } );
  });

  //. リサイズ時に Canvas サイズを変更する
  $(window).on( 'load resize', function(){
    var browserWidth = window.innerWidth;
    var browserHeight = window.innerHeight;
    mx = ( browserWidth * 0.8 ) / 2;
    my = ( browserHeight * 0.6 ) / 2;

    resized();
  });

  var movefun = function( event ){
    event.preventDefault();
  }
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  var canvas = document.getElementById( 'mycanvas' );
  if( canvas && canvas.getContext ){
    canvas_width = Math.floor( browserWidth * 0.8 );
    canvas_height = Math.floor( browserHeight * 0.6 );

    //. ここだと何度も実行されてしまって想定通りにならない
    //mx = canvas_width / 2;
    //my = canvas_height / 2;
    if( canvas.width != canvas_width || canvas.height != canvas_height ){
      canvas.width = canvas_width;
      canvas.height = canvas_height;
      mx = canvas_width / 2;
      my = canvas_height / 2;
    }

    //. 初期化を通知
    var name = $('#name').text();
    var msg = {
      uuid: uuid,
      room: '<%= room %>',
      name: name,
      timestamp: ( new Date() ).getTime(),
      width: canvas.width,
      height: canvas.height
    };
    socketio.json.emit( 'init_client', msg );
  }
}

function pushStart(){
  isPush = true;
  $('#start_btn').css( 'display', 'none' );
  sendImage();
}

function pushEnd(){
  isPush = false;
  //sendImage();
}

function resetCanvas( no_reset_unredo ){
  init();
  resized();

  if( !no_reset_unredo ){
    backgroundcolor = null;

    //. リセットを通知
    //sendImage();
  }
}

function isAndroid(){
  return ( navigator.userAgent.indexOf( 'Android' ) > 0 );
}

function save(){
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  //. 画像データ
  var png = canvas.toDataURL( 'image/png' );
  png = png.replace( /^.*,/, '' );

  //. バイナリ変換
  var bin = atob( png );
  var buffer = new Uint8Array( bin.length );
  for( var i = 0; i < bin.length; i ++ ){
    buffer[i] = bin.charCodeAt( i );
  }
  var blob = new Blob( [buffer.buffer], {
    type: 'image/png'
  });

  //. フォームにして送信
  console.log( 'Sending data... : ' + blob.size );
  var formData = new FormData();
  formData.append( 'image', blob );    //. <form enctype='multipart/formdata'><input name='image' type='file'/> ...
  formData.append( 'timestamp', ( new Date() ).getTime() );
  formData.append( 'name', $('#name').text() );
  $.ajax({
    type: 'POST',
    url: '/image',
    data: formData,
    contentType: false,
    processData: false,
    success: function( data, dataType ){
      console.log( data );
    },
    error: function( jqXHR, textStatus, errorThrown ){
      console.log( textStatus + ': ' + errorThrown );
    }
  });
}

function setBG(){
  var color = $('#select_color').val();
  if( color ){
    if( color != 'transparent' ){
      backgroundcolor = color;
    }else{
      backgroundcolor = null;
    }
    redrawCanvas();
  }
}

function redrawCanvas(){
  resetCanvas( true );

  if( backgroundcolor ){
    var canvas = document.getElementById( 'mycanvas' );
    if( !canvas || !canvas.getContext ){
      return false;
    }
    var ctx = canvas.getContext( '2d' );

    //. 全体をベタ塗り
    ctx.beginPath();
    ctx.fillStyle = backgroundcolor; //"rgb( 255, 255, 255 )";
    ctx.fillRect( 0, 0, canvas.width, canvas.height );
    ctx.stroke();
  }
}

function generateUUID(){
  //. Cookie の値を調べて、有効ならその値で、空だった場合は生成する
  var did = null;
  cookies = document.cookie.split(";");
  for( var i = 0; i < cookies.length; i ++ ){
    var str = cookies[i].split("=");
    var une = unescape( str[0] );
    if( une == " deviceid" || une == "deviceid" ){
      did = unescape( unescape( str[1] ) );
    }
  }

  if( did == null ){
    var s = 1000;
    did = ( new Date().getTime().toString(16) ) + Math.floor( s * Math.random() ).toString(16);
  }

  var dt = ( new Date() );
  var ts = dt.getTime();
  ts += 1000 * 60 * 60 * 24 * 365 * 100; //. 100 years
  dt.setTime( ts );
  var value = ( "deviceid=" + did + '; expires=' + dt.toUTCString() + '; path=/' );
  if( isMobileSafari() ){
    $.ajax({
      url: '/setcookie',
      type: 'POST',
      data: { value: value },
      success: function( r ){
        //console.log( 'success: ', r );
      },
      error: function( e0, e1, e2 ){
        //console.log( 'error: ', e1, e2 );
      }
    });
  }else{
    document.cookie = ( value );
    //console.log( 'value: ', value );
  }

  return did;
}

function isMobileSafari(){
  return ( navigator.userAgent.indexOf( 'Safari' ) > 0 && navigator.userAgent.indexOf( 'Mobile' ) > 0 );
}

function sendImage(){
  //. キャンバスを取得
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }

  //. 画像データ
  var png = canvas.toDataURL( 'image/png' );

  //. コメント
  var comment = $('#comment').val();
  if( !comment ){ comment = ''; }

  //. 画像を通知
  var msg = {
    uuid: uuid,
    room: '<%= room %>',
    comment: comment,
    timestamp: ( new Date() ).getTime(),
    image_src: png
  };
  socketio.json.emit( 'image_client', msg );
}

function drawTarget(){
  //. ( mx, my ) にターゲットを描画
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  var color = $('#select_color').val();
  if( color == 'transparent' ){
    ctx.globalCompositeOperation = 'destination-out';
  }else{
    ctx.globalCompositeOperation = 'source-over';
  }

  ctx.beginPath();
  ctx.lineWidth = 1;
  ctx.lineCap = 'round';
  ctx.moveTo( mx, my - 15 );
  ctx.lineTo( mx, my - 5 );
  ctx.moveTo( mx, my + 15 );
  ctx.lineTo( mx, my + 5 );
  ctx.moveTo( mx - 15, my );
  ctx.lineTo( mx - 5, my );
  ctx.moveTo( mx + 15, my );
  ctx.lineTo( mx + 5, my );
  if( color != 'transparent' ){
    ctx.strokeStyle = color;
  }
  ctx.stroke();

  //. スコア
  ctx.font = "20px serif";
  if( color == 'transparent' ){
    ctx.globalCompositeOperation = 'destination-out';
  }else{
    ctx.globalCompositeOperation = 'source-over';
    ctx.fillStyle = color;
  }
  var text = ( '00000' + score ).slice( -5 );
  var measure = ctx.measureText( text );
  ctx.fillText( text, ( canvas.width - measure.width ) / 2, 20 );

  //. 敵
  ctx.font = "40px serif";
  for( var i = 0; i < Zs.length; i ++ ){
    var z = '' + Zs[i].num;
    ctx.fillText( z, Zs[i].x, Zs[i].y );
  }

  //. レーザー描画
  if( isPush ){
    if( audio_source_shoot ){
      audio_source_shoot.connect( audio_context.destination );
      try{
        audio_source_shoot.start( 0 );
        loadAudioList();
      }catch( e ){
      }
    }

    ctx.beginPath();
    ctx.moveTo( 0, canvas_height );
    ctx.lineTo( mx, my );
    ctx.moveTo( canvas_width, canvas_height );
    ctx.lineTo( mx, my );
    if( color != 'transparent' ){
      ctx.strokeStyle = color;
    }
    ctx.stroke();

    //. 判定
    var b = false;
    for( var i = 0; i < Zs.length && !b; i ++ ){
      if( Zs[i].x <= mx && mx <= Zs[i].x + 40 && Zs[i].y >= my && my >= Zs[i].y - 40 ){
        score += Zs[i].num * 10;
        Zs.splice( i, 1 );
        i = Zs.length;
        b = true;

        ystep = Math.floor( score / 200 ) + 1;
        if( ystep > 5 ){ ystep = 5; }
        Znum = Math.floor( ystep / 2 ) + 1;
      }
    }

    if( !b ){
      if( score > 0 ){
        score -= 10;
      }
    }else{
      if( audio_source_hit ){
        audio_source_hit.connect( audio_context.destination );
        try{
          audio_source_hit.start( 0 );
          loadAudioList();
        }catch( e ){
        }
      }
    }
  }
}
</script>

</body>
</html>
